1.
Vilket årtusende är du född?
Antag att ett program ger följande körningsresultat:
    Vilket år är du född? 1998
    Du föddes förra årtusendet.
Kopiera följande ofullständiga program och fyll i det som fattas som är markerat med "..." så att programmet ger ovan körning. 
Se kommentarerna på raderna som fattas.
   #include <iostream>
   using namespace std;
    
   int main()
   {
       int year;

       ...                //fråga efter födelseår
       ...                //inmatning av födelseår
       if (year < 2000)
          cout << ...     //Se exemplet ovan
       return 0;
   }
Spara programmet i filen ovning3_1.cpp

2.
Lägg till en else-gren i programmet
Ändra programmet i uppgift 1 så att if-satserna i stället blir:
    if (year < 2000)
       cout << "Du föddes förra årtusendet.";
    else
       cout << "GRATTIS!";
Provkör ditt program och mata in 1998 första gången och 2000 andra gången.
Spara programmet som ovning3_2.cpp

3.
övning på loopar
Kopiera följande program och provkör:
   #include <iostream>
   using namespace std;

   int main()
   {
      int tal;                   //sats 1  

      tal=0;                     //sats 2
      while (tal<5)              //sats 3
      {
         cout << "HEJ!" << endl; //sats 4
         tal = tal+1;            //sats 5
      }

      return 0;
   }
Kommentarer och förklaringar:
Sats 1: En variabel deklareras.
Sats 2: Variabeln tal tilldelas värdet 0.
Sats 3: Så länge som tal är mindre än 5, gör det som står inom klamrarna, {, }
Sats 4: Skriv ut HEJ, byt rad
Sats 5: Det nya värdet på tal ökas med 1.

Det som står inom klamrarna, {, }, utförs så länge som villkoret i parentesen är SANT.
Lägg till en rad efter sats 5:

      cout << tal << endl;       //sats 6
Provkör och se hur variabeln tal ändras under programkörningen.
Spara programmet som exempelvis ovning3_3.cpp

4.
Inläsning av 5 tal och beräkna summan
Läs in 5 olika tal med hjälp av en while-loop. Summera talen efterhand som de läses in i en variabel sum. 
Skriv ut summan med lämplig ledtext. Läs kommentarerna i programmet för hjälp.
     #include <iostream>
     using namespace std;

     int main()
     {
        int ... //fyll i de variable du behöver (kan fyllas i sist)    
        
        i=1;           //i ges ett startvärde!
        while (i <= 5) //satserna mellan { och } utförs om det stämmer att i<=5
        {              
	   ...         //Mata in ett tal. Använd inte 5 olika variabelnamn!
           ...         //summera talet till variabeln sum, se
                       //uppgift 3 ovan
           i=i+1;      //öka  i  med 1.
        }              //När i blivit 6 är det slut på while-loopen
        cout << ...    //skriv ut summan med lämplig ledtext

        return 0;
     }

Prova att köra ditt program flera gånger. Vad måste göras med variabeln sum innan man går in i loopen?
Spara programmet som exempelvis ovning3_4.cpp.

5. 
Upprepa uppgift 4, men nu med for istället
        
        ...            //börja som i uppgift 4 
        
        for (i=1; i<=5; i++)  //variabeln i räknar fr o m 1  t o m 5,
                              //ett steg i taget
        {              //satserna mellan { och } utförs 5 gånger
           ...         //Mata in ett tal.
           ...         //summera talet till variabeln sum

        }              //betyder slut på for-loopen
        ...            //avsluta som i uppgift 4 
Spara programmet exempelvis som ovning3_5.cpp

6. 
Läs och summera tal
Läs in ett antal positiva tal och summera dem.
Fortsätt ända tills ett negativt tal matas in.
Det negativa talet skall inte räknas in i summan.
Skriv ut summan samt hur många tal du läst in, ej inräknat det negativa talet.

Du behöver följande variabler: tal, sum och i som räknar hur många tal du matat in.

Vad passar bäst, for eller while om man från början inte vet hur många tal som skall matas in? 
Hur formuleras villkoret "..tills ett negativt tal matas in..", dvs så länge talet är positivt?
Observera att tal och i måste ges startvärden före loopen.
Spara programmet exempelvis som ovning3_6.cpp

7.
Läs och summera 10 tal i en loop
Läs in och summera tal i en loop igen, men nu 10 positiva tal (dvs ett bestämt antal).
Använd en variabel max i loopen där du för varje inmatat tal kontrollerar om det är det största talet hittills
Skriv sist ut summan av de tio talen samt det tal som är störst. 
max bör ges ett initialvärde före loopen så att det finns något att jämföra med. 
Vad kan vara lämpligt?

Spara programmet exempelvis som ovning3_7.cpp

8.
Exempel på oändlig loop
Kopiera nedanstående program, spara det som ovning3_8.cpp. Provkör sedan programmet.
Programmet är ett exempel på en oändlig loop, och du måste därför avbryta programmet. 
Du kan avbryta program genom att trycka CTRL-C (en eller ett par ggr) i det fönster du kör programmet. 
På Mac kan du använda appen Aktivitetskontroll, markera processen och avbryta den.
Ett alternativt sätt (Windows) är att avbryta programmet på samma sätt som man kan avbryta andra program: 
Tryck på CTRL-ALT-DELETE, dvs de tre tangenterna samtidigt. Välj att visa de processer/program som är aktiva. 
Markera ovning3_8.exe och avsluta det.

   #include <iostream>
   using namespace std;

   int main()
   {
      int antal=0;
      const int MAX=10;    // heltalskonstant 
      bool fortsaett=true; // variabel av typen bool initieras till true
    
      cout << "Här kommer " << MAX << " rader med HEJ" << endl;
    
      while (fortsaett) // variabeln fortsaett styr loopen       
      {
         cout << "Hej" << endl;
         antal++;
         fortsaett = (antal>=0); // fortsaett får ett nytt värde:
                                 // om antal>=0 true annars false
      }
      cout << "Nu är loopen klar" << endl;
   
      return 0;
   }

Modifiera sedan while-loopen så att det fungerar som det är tänkt.
Tips: Se till att variabeln fortsaett stoppar loopen när det riktiga antalet Hej har skrivits ut.