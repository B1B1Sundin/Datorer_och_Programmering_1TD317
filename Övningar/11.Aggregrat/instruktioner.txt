Byggstenar att arbeta med
Du har följande klasser/funktioner till förfogande:

klassen daeck, som representerar ett bildäck och har mönsterdjup i gummi, djup som attribut.
klassen bensintank, som representerar en bensintank och har antal liter i tanken och tankens maximala volym som attribut.
klassen bil, som från början är lite ofullständig och enbart har attributen fyra däck och en typ (sträng, t ex Volvo).
funktionen slump, som ger slumptal i intervallet 0 till X, där X är en double som ges som inparameter till funktionen.
Filerna som behövs kan laddas ner under respektive uppgift.

Uppdelning av kod
Som vi redan nämnt är det bra att i C++ dela upp sina program i filer av olika slag: headerfiler för klassdefinitioner, metodimplementationsfiler och testhuvudprogram av olika slag. Dock vet vi att det kan vara bökigt att hantera, så i denna laboration ger vi er all kod i samma fil för varje uppgift.

Uppgifter
1.
Kopiera filen testadaeck_start.cp som enbart innehåller klassen daeck med tillhörande tomt testhuvudprogram.
 Fyll i kod i main så att två däck skapas och metoder i klassen testas på dessa. Skriv ut resultat då och då.

2.
Ladda ner bil_0.cpp som är samma vi gått igenom i detta kursavsnitt om aggregat. 
Nu finns en bil som har en typ (t ex Volvo) och fyra däck. Kompilera och testkör. 
Inte så roligt kanske..., men med hjälp av slumptal kan vi piffa upp det lite.

Funktionen slump

Inför nu den vanliga funktionen slump som ger ett slumptal mellan noll och tal.

double slump( double tal )
{
  // För att få tal i intervallet 0-tal på SUN:
  // return drand48()*tal;
  // För att få tal i intervallet 0-tal på PC:
  // return tal*rand()/double(RAND_MAX);

  return drand48()*tal;  //Vi kör på SUN nu
}
 

Deklarera funktionen t ex överst i filen, dvs direkt före klassen daeck. 
Implementationen (koden ovan), kan t ex läggas sist i filen.

Skriv nytt huvudprogram, så att det blir en liten tävling mellan två bilar. Börja så här:

int main()
{
  // Starta slumptalsgeneratorn. 
  int froe = long( time( NULL ) );

  //  srand( froe );   // På PC
  srand48( froe );   // På Sun

  // Nu är slumptalsgeneratorn initierad
  // med ett frö, dvs nu kan funktionen
  // "slump" anropas t.ex. här i main för
  // att få slumptal.
  //....... C++-kod skall in här.....

  return 0;
}

Algoritm:

1. Initiera slumptalsgeneratorn.
2. Skapa två bilobjekt av typen Volvo och Saab.
3. Skriv info om bilobjekten.
4. Repetera i en loop:
5. Gör gaspådrag med Volvo. Låt däckslitagekonstanten (parameter till metoden gaspaadrag) vara ett slumptal mellan noll och 4.
6. Gör gaspådrag med Saab, Låt däckslitagekonstanten vara ett slumptal mellan noll och 4.
7. Skriv info om objekten.
8. Gör en liten paus, dvs kräv att användaren trycker return efter varje gaspådrag. (Görs med ledtext och cin.get();).
9. Snurra på i loopen så länge som antal slita däck på båda bilarna var för sig är mindre än fyra. 
Om någon bil har alla sina däck nedslitna, så stannar loopen.


3.
Antag att man vill simulera ett gaspådrag med en mer utvecklad bil. 
Vi lägger då till några attribut. Man är t ex intresserad av att veta:

- hur långt bilen kommer
- hur många liter bensin som går åt
- hur många millimeter av gummit på däcken som slits bort
 

Ny klass bensintank

Definitionen för daeck är oförändrad och definitionen för den nya klassen bensintank ser ut så här:

class bensintank
{
private:
  double liter; // Antal liter bensin i tanken.
  double volym; // Max antal liter, dvs tankens "volym".

public:
  bensintank();
  bensintank( double lit ); // Full tank (volym=liter).
  bensintank( double lit, double vol );
  double haemta_liter();
  void foerbruka( double & lit ); // Bensinen minskar
                                  // om det går.
  void skriv();    
};

För att testa enbart bensintank, kopiera hem filen testabilbensintank.cpp  Ladda ner testabilbensintank.cpp, kompilera och kör.


Uppdaterad definition av bil

Definitionen för bil ser nu ut så här:

const int framhjulsdriven = 1;
const int bakhjulsdriven = 0;

class bil
{
private:
  string typ;            // Biltyp, t.ex. "Volvo"
  int framhjuls;         // Framhjuls-bakhjulsdriven?
  bensintank tank;       // Bensintanken.
  daeck hf, vf, hb, vb;  // Fyra st hjul.
  double xpos;           // x-position, 0=startlinjen.

public:
  bil();                            // Konstruktorer.
  bil( string nytyp,  int nyfram );
  string haemta_typ();        // Vilken typ?
  int tom();                  // 1=tom tank, 0 annars. 
  double haemta_x ();         // Var är bilen?
  void gaspaadrag( double d, double b); // Gör gaspådrag.
  void skriv();                         // Skriv bilinfo.
};

Kopiera hem alla_start.cpp  Ladda ner alla_start.cppoch testkör.

Studera koden. Observera att programmet är körbart, men metoderna i bil-klassen är ej fullständiga och korrekta.

 

Slitage

Slitage av däck samt bensinåtgång vid varje gaspådrag är beroende dels av ett slumptal samt dels om bilen har framhjuls- eller bakhjulsdrift. 
Följande finns i metoden gaspaadrag nu:

void bil::gaspaadrag( double d, double b )
{
  // Däcken slits och bensin går åt 
  // vid en rivstart.
  // Parametrar: d = däckslitage,
  // b = bensinminskning.
  // Beroende på om bilen är framhjuls-
  // eller bakhjulsdriven, så slits
  // den på lite olika sätt...
  //
  // Dessutom, man kan köra på helslitna däck, 
  // men då går det åt mycket mer bensin!
  //
  // Antag att däcken i varje däckpar
  // (höger/vänster) slits lika mycket.

  // Diverse vetenskapligt framtagna konstanter...
  const double framslit = 2.0;
  const double bakslit = 2.5;
  const double framliter = 1.75;
  const double bakliter = 1.5;
  double fram, bak, lit;

  if ( framhjuls )
    {
      fram = d*framslit;
      bak  = d;
      lit  = b*framliter;
    }
  else
    {
      fram = d;
      bak  = d*bakslit;
      lit  = b*bakliter;
    }

  //*** Här saknas några
  // variabeldeklarationer/initialiseringar***

  // init=innan. 
  double hur_mycket_soppa = tank.haemta_liter();  

  if ( hur_mycket_soppa > 0 )
    {
      //***Här saknas det kod***
      // * bygg upp sum genom att slita på däcken.
      // * förbruka rätt mängd bensin.
      // * fixa nya x-positionen.
    }
}
där framhjuls är ett attribut som har heltalsvärdet 1 om bilen är framhjulsdriven, annars 0. Dvs variablerna fram, bak, lit ska skickas in till metoderna slitage (i daeck-klassen) och foerbruka (i bensintank-klassen).

 

Slut på däckgummi

Om man kör slut på gummit (dvs om djup==0.0) så straffas man med att det går åt mer bensin. 
Man skulle kunna tänka sig att byta däck som alternativ, men det struntar vi i nu. 
Formel för bensinåtgång vid ett gaspådrag:
       soppaminus = ( 1 + sum )*lit;
där variabeln sum är antalet däck som har slut på gummit.


Hur långt åker bilen?

Den sträcka som bilen åker under ett gaspådrag uppfyller följande formel:

       nya x-positionen = gamla x-positionen + antal liter bensin som gick åt + 10 gånger totala antalet mm gummi som slets bort.

OBS! Om tanken är tom, så skall inte x-positionen uppdateras.

 

Uppgift att göra ( alla_start_1.cpp)

Fortsätt och bygg på koden för alla_start.cpp. 
Skriv de metoder som saknas eller är ofullständiga i klassen bil. Kompilera och testkör!

Ett sätt att se om metoden gaspaadrag fungerar som den ska är att anropa den med "icke-slumptal" i huvudprogrammet, dvs byt

Volvo.gaspaadrag( slump(2.0), slump(20.0) );
Saab.gaspaadrag( slump(2.0), slump(20.0) );
mot

Volvo.gaspaadrag( 2.0, 20.0 );
Saab.gaspaadrag( 2.0, 20.0 );
Ändra, kompilera om och testkör. Verkar det fungera som du vill?

4. (alla_start_2.cpp)
Bygg vidare på den lösning du fick i uppgift 3 ovan, eller ladda hem filen alla_svar.cpp  Ladda ner alla_svar.cpp(som ju är lösningsförslag till uppgift 3).
Komplettera programmet med ett nytt huvudprogram, så att det utför en tävling mellan de två bilarna. 
Tävlingen innebär en serie gaspådrag fram tills dess att båda får slut på bensin. 
Skriv ut information om den bil som kom längst.

5. (alla_start_3.cpp)
Bygg vidare på den lösning du fick i uppgift 3, eller kopiera alla_svar.cpp.
Modifiera huvudprogrammet så att det hanterar en array av ca 10 st bilar som skall tävla. 
Kör en serie av gaspådrag för varje bil och sluta tävlingen då alla bilar har slut på bensin. 
Skriv ut information om den som kom längst.

6. Vill du se hur konstruktorer anropas när man arbetar med aggregatklasser, lägg i så fall in testutskrifter i dem, kompilera och kör igen.
